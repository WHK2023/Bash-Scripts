#!/bin/bash
# Password Crack Time Estimation Script

# Prompt the user for a password
read -p "Enter the password to estimate: " PASSWORD
echo

# Prompt the user for the attacker's computational power (GUESSES_PER_SECOND)
while true; do
  read -p "Enter the attacker's computational power (1000-1000000000 guesses per second): " ATTACKER_POWER
  if ((ATTACKER_POWER >= 1000 && ATTACKER_POWER <= 1000000000)); then
    break
  else
    echo "Invalid input. Please enter a value between 1000 and 1000000000."
  fi
done

# Calculate password entropy (assuming the password is random)
PASSWORD_LENGTH=${#PASSWORD}
GUESSES_PER_SECOND=$ATTACKER_POWER

# Calculate the estimated time to crack (in seconds)
CRACK_TIME_SECONDS=$((94 ** $PASSWORD_LENGTH / GUESSES_PER_SECOND))

# Ensure positive values
if [ $GUESSES_PER_SECOND -le 0 ]; then
  GUESSES_PER_SECOND=1
fi

if [ $CRACK_TIME_SECONDS -le 0 ]; then
  CRACK_TIME_SECONDS=1
fi

# Convert the time to the desired format (Years:Months:Weeks:Days:Hours:Minutes:Seconds)
CRACK_TIME_MINUTES=$((CRACK_TIME_SECONDS / 60))
CRACK_TIME_HOURS=$((CRACK_TIME_MINUTES / 60))
CRACK_TIME_DAYS=$((CRACK_TIME_HOURS / 24))
CRACK_TIME_WEEKS=$((CRACK_TIME_DAYS / 7))
CRACK_TIME_MONTHS=$((CRACK_TIME_WEEKS / 4))
CRACK_TIME_YEARS=$((CRACK_TIME_MONTHS / 12))

# Calculate remaining days, hours, minutes, and seconds
REMAINING_MONTHS=$((CRACK_TIME_MONTHS % 12))
REMAINING_WEEKS=$((CRACK_TIME_WEEKS % 4))
REMAINING_DAYS=$((CRACK_TIME_DAYS % 7))
REMAINING_HOURS=$((CRACK_TIME_HOURS % 24))
REMAINING_MINUTES=$((CRACK_TIME_MINUTES % 60))
REMAINING_SECONDS=$((CRACK_TIME_SECONDS % 60))

# Display the results in the desired format
echo "Guesses per Second: $GUESSES_PER_SECOND"
echo "Estimated Time to Crack: $CRACK_TIME_YEARS:Y $REMAINING_MONTHS:M $REMAINING_WEEKS:W $REMAINING_DAYS:D $REMAINING_HOURS:H $REMAINING_MINUTES:M $REMAINING_SECONDS:S"

# For further details go to https://training.cyberrealm.us/projects/bash-scripts/password-crack-estimation
